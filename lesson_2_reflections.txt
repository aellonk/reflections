What happens when you initialize a repository? Why do you need to do it?

	After navigating to the correct directory in the terminal, you need to 
	run the command "git init" in order to create a new repository. Then you 
	can check if it worked by running the command "ls -a" to get a list of the 
	contents in the repository. This should include .git.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area offers a space to gather files you are done with but want 
	to  wait to commit. Perhaps you want to commit a certain file along with another 
	file you are still working on. The certain file can wait in the staging area until 
	you are ready to commit both files together. The staging area allows you to put it 
	aside from your working directory but also prevents it from being in the repository 
	before it's ready.

How can you use the staging area to make sure you have one commit per logical
change?

	You can use git diff with no arguments to check the changes you made between the 
	working directory and the staging area. That could remind you what to commit. Also
	to check the difference between the staging	area and the most recent commit, use
	git diff --staged. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches would help keep my history organized in case one person wants to make 
	a bunch of experimental changes while still keeping an original version for 
	others to work on. It allows the freedom to try out changes without fear of 
	losing the original project.

How do the diagrams help you visualize the branch structure?

	Diagrams help me visualize the branch structure because I can see which commits 
	were made in various branches. It makes it easy to tell which branch to checkout
	and where to place your next commit.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches together creates a single branch that has features from 
	both versions. We visualize it in the diagram as coming together because that's 
	what the merge does to the branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	
	Always merging manually allows you to commit for each merge to be tranparent 
	about any changes. Then you can see commits that occured before and after the merge, 
	and the merge happens at a logical point.